{"meta":{"title":"MEI NET LOG","subtitle":"","description":"","author":"meidongfeng","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"JAVA 多线程","slug":"JAVA-Thread","date":"2021-08-15T14:32:17.000Z","updated":"2021-08-15T15:12:29.900Z","comments":true,"path":"2021/08/15/JAVA-Thread/","link":"","permalink":"http://example.com/2021/08/15/JAVA-Thread/","excerpt":"","text":"JAVA1、线程的创建 从Thread派生类，覆写run 创建Thread实例，传入Runnable实例；java8 lambda语法，相当于传入Runnable 通过Callable和Future创建线程 线程池 CompletableFuture： 针对Future做了改进，可以传入回调对象，当异步任务完成或者发生异常时，自动调用回调对象的回调方法 1.1各种线程创建方式对比1、采用实现Runnable、Callable接口的方式创建多线程时， 优势是： 线程类只是实现了Runnable接口或Callable接口，还可以继承其他类。在这种方式下，多个线程可以共享同一个target对象，所以非常适合多个相同线程来处理同一份资源的情况，从而可以将CPU、代码和数据分开，形成清晰的模型，较好地体现了面向对象的思想。 劣势是： 编程稍微复杂，如果要访问当前线程，则必须使用Thread.currentThread()方法。 2、使用继承Thread类的方式创建多线程时， 优势是： 编写简单，如果需要访问当前线程，则无需使用Thread.currentThread()方法，直接使用this即可获得当前线程。 劣势是： 线程类已经继承了Thread类，所以不能再继承其他父类。 3、Runnable和Callable的区别 (1) Callable规定（重写）的方法是call()，Runnable规定（重写）的方法是run()。 (2) Callable的任务执行后可返回值，而Runnable的任务是不能返回值的。 (3) call方法可以抛出异常，run方法不可以。 (4) 运行Callable任务可以拿到一个Future对象，表示异步计算的结果。它提供了检查计算是否完成的方法，以等待计算的完成，并检索计算的结果。通过Future对象可以了解任务执行情况，可取消任务的执行，还可获取执行结果。 2、线程状态1、New 2、Runnable 3、Blocked 4、Waiting 5、Timed Waiting 6、Terminated 3、线程同步image-20210815224030917 4、线程池ExecutorService接口： ​ FixedThreadPool ​ CachedThreadPool ​ SingleThreadExecutor","categories":[],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://example.com/tags/JAVA/"}]},{"title":"Hello World，Quick Start","slug":"hello-world","date":"2021-08-12T15:24:48.197Z","updated":"2021-08-13T14:07:04.082Z","comments":true,"path":"2021/08/12/hello-world/","link":"","permalink":"http://example.com/2021/08/12/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://example.com/tags/JAVA/"}]}